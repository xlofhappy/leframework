package com.qweather.leframework.base.rbac.user_log.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.qweather.leframework.base.common.util.PoUtil;
import com.qweather.leframework.base.rbac.user_log.service.UserLogQuery;
import com.qweather.leframework.base.rbac.user_log.service.UserLogService;
import com.qweather.leframework.base.rbac.user_log.service.cmd.InsertUserLogCmd;
import com.qweather.leframework.base.rbac.user_log.service.cmd.UpdateUserLogCmd;
import com.qweather.leframework.base.rbac.user_log.service.po.UserLogEntity;
import com.qweather.leframework.core.config.Config;
import com.qweather.leframework.model.command.CommandExecutor;
import com.qweather.leframework.base.rbac.user_log.service.UserLogType;
import com.qweather.leframework.base.rbac.user_log.service.cmd.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Created at 2022-11-07T15:56:56+08:00
 * Generated by Le Generator, created by xiaole
 *
 * @author dongjunchen
 */
@Service
public class UserLogServiceImpl implements UserLogService {

    private final CommandExecutor executor;
    private final ObjectMapper objectMapper;

    @Autowired
    public UserLogServiceImpl(CommandExecutor commandExecutor, ObjectMapper objectMapper) {
        this.executor = commandExecutor;
        this.objectMapper = objectMapper;
    }

    @Override
    public UserLogQuery createUserLogQuery() {
        return new UserLogQueryImpl(executor);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public UserLogEntity createUserLog() {
        return new UserLogEntity(Config.getDaoConfig().getIdPool().getNextId());
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void saveUserLog(UserLogEntity entity) {
        if (entity != null && entity.getId() != null) {
            PoUtil.setLePoCommonProperty(entity);
            UserLogEntity one = createUserLogQuery().id(entity.getId()).one();
            if (one != null) {
                executor.execute(new UpdateUserLogCmd(entity));
            } else {
                executor.execute(new InsertUserLogCmd(entity));
            }
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void addUserLog(Long userId, String userEmail, UserLogType userLogType, Object object) {
        try {
            UserLogEntity userLog = this.createUserLog();
            userLog.setUserId(userId);
            userLog.setEmail(userEmail);
            userLog.setType(userLogType.type());
            userLog.setContent(this.objectMapper.writeValueAsString(object));
            this.saveUserLog(userLog);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteUserLog(Long id) {
        executor.execute(new DeleteUserLogCmd(id));
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteUserLogForever(Long id) {
        executor.execute(new DeleteUserLogForeverCmd(id));
    }

    @Override
    public void deleteUserLogByUserId(Long userId) {
        executor.execute(new DeleteUserLogByUserIdCmd(userId));
    }

}
