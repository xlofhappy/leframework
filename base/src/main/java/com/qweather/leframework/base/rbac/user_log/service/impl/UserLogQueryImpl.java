package com.qweather.leframework.base.rbac.user_log.service.impl;

import com.qweather.leframework.base.rbac.user_log.service.UserLogQuery;
import com.qweather.leframework.base.rbac.user_log.service.UserLogType;
import com.qweather.leframework.base.rbac.user_log.service.cmd.CountUserLogCmd;
import com.qweather.leframework.base.rbac.user_log.service.cmd.ListUserLogCmd;
import com.qweather.leframework.base.rbac.user_log.service.po.UserLogEntity;
import com.qweather.leframework.core.result.Page;
import com.qweather.leframework.model.AbstractQuery;
import com.qweather.leframework.model.OrderBy;
import com.qweather.leframework.model.command.CommandExecutor;

import java.util.List;

/**
 * Created at 2022-11-07T15:56:56+08:00
 * Generated by Le Generator, created by xiaole
 *
 * @author dongjunchen
 */
public class UserLogQueryImpl extends AbstractQuery<UserLogQuery, UserLogEntity> implements UserLogQuery {

    private Long id;
    private Long userId;
    private String email;
    private String type;
    private String content;
    private CommandExecutor commandExecutor;

    public UserLogQueryImpl(CommandExecutor commandExecutor) {
        this.commandExecutor = commandExecutor;
    }

    enum Query implements OrderBy {
        ID(" A.ID "), USER_ID(" A.USER_ID "), TYPE(" A.TYPE "), CONTENT(" A.CONTENT ");

        private String name;

        Query(String name) {
            this.name = name;
        }

        @Override
        public String getName() {
            return name;
        }
    }

    @Override
    public UserLogQuery id(Long id) {
        this.id = id;
        return this;
    }

    @Override
    public UserLogQuery userId(Long userId) {
        this.userId = userId;
        return this;
    }

    @Override
    public UserLogQuery email(String email) {
        this.email = email;
        return this;
    }

    @Override
    public UserLogQuery type(UserLogType userLogType) {
        this.type = userLogType.type();
        return this;
    }

    @Override
    public UserLogQuery content(String content) {
        this.content = content;
        return this;
    }

    @Override
    public UserLogQuery orderById(Direction direction) {
        return orderBy(Query.ID, direction);
    }

    @Override
    public UserLogQuery orderByUserId(Direction direction) {
        return orderBy(Query.USER_ID, direction);
    }

    @Override
    public UserLogQuery orderByType(Direction direction) {
        return orderBy(Query.TYPE, direction);
    }

    @Override
    public UserLogQuery orderByContent(Direction direction) {
        return orderBy(Query.CONTENT, direction);
    }

    @Override
    protected long executeCount() {
        return commandExecutor.execute(new CountUserLogCmd(this));
    }

    @Override
    protected List<UserLogEntity> executeList(Page page) {
        if (page != null) {
            this.setSkip(page.getSkip());
            this.setLimit(page.getLimit());
        }
        return commandExecutor.execute(new ListUserLogCmd(this));
    }
}
